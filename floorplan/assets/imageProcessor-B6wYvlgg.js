class t{#t=null;#e=null;#n=null;#a=null;constructor(){this.#o()}#o(){if(this.#t=document.createElement("canvas"),this.#e=this.#t.getContext("2d",{willReadFrequently:!0}),!this.#e)throw new Error("Failed to initialize canvas context for image processing")}async processFloorPlan(t){try{const e=await this.#r(t);this.#l(e),this.#e.drawImage(e,0,0),this.#n=this.#e.getImageData(0,0,this.#t.width,this.#t.height);const n=await this.#s();return this.#a=n,n}catch(e){throw new Error(`Image processing failed: ${e.message}`)}}async#r(t){return new Promise(((e,n)=>{const a=new Image;a.onload=()=>{URL.revokeObjectURL(a.src),e(a)},a.onerror=()=>{URL.revokeObjectURL(a.src),n(new Error("Failed to load image file"))},a.src=URL.createObjectURL(t)}))}#l(t){const e=1024,{width:n,height:a}=t;let o=n,r=a;if(n>e||a>e){const t=e/Math.max(n,a);o=Math.floor(n*t),r=Math.floor(a*t)}this.#t.width=o,this.#t.height=r}async#s(){const{width:t,height:e,data:n}=this.#n,a=this.#i(n,t,e),o=this.#h(a,t,e,1),r=this.#c(o,t,e),l=this.#d(r,t,e),s=this.#u(l,t,e);return{dimensions:{width:t,height:e},walls:s,doors:this.#f(l,s,t,e),windows:this.#m(l,s,t,e),rooms:this.#g(l,s,t,e),scale:this.#y(s,t,e),processedImage:l}}#i(t,e,n){const a=new Uint8ClampedArray(e*n);for(let o=0;o<t.length;o+=4){const e=Math.round(.299*t[o]+.587*t[o+1]+.114*t[o+2]);a[o/4]=e}return a}#h(t,e,n,a){const o=2*Math.ceil(3*a)+1,r=this.#p(o,a),l=this.#x(t,e,n,r);return this.#w(l,e,n,r)}#p(t,e){const n=new Float32Array(t),a=Math.floor(t/2);let o=0;for(let r=0;r<t;r++){const t=r-a;n[r]=Math.exp(-t*t/(2*e*e)),o+=n[r]}for(let r=0;r<t;r++)n[r]/=o;return n}#x(t,e,n,a){const o=new Uint8ClampedArray(e*n),r=Math.floor(a.length/2);for(let l=0;l<n;l++)for(let n=0;n<e;n++){let s=0;for(let o=0;o<a.length;o++){s+=t[l*e+Math.max(0,Math.min(e-1,n+o-r))]*a[o]}o[l*e+n]=Math.round(s)}return o}#w(t,e,n,a){const o=new Uint8ClampedArray(e*n),r=Math.floor(a.length/2);for(let l=0;l<n;l++)for(let s=0;s<e;s++){let i=0;for(let o=0;o<a.length;o++){i+=t[Math.max(0,Math.min(n-1,l+o-r))*e+s]*a[o]}o[l*e+s]=Math.round(i)}return o}#c(t,e,n){const{magnitude:a,direction:o}=this.#M(t,e,n),r=this.#v(a,o,e,n);return this.#C(r,e,n,50,150)}#M(t,e,n){const a=new Float32Array(e*n),o=new Float32Array(e*n),r=[-1,0,1,-2,0,2,-1,0,1],l=[-1,-2,-1,0,0,0,1,2,1];for(let s=1;s<n-1;s++)for(let n=1;n<e-1;n++){let i=0,h=0;for(let a=-1;a<=1;a++)for(let o=-1;o<=1;o++){const c=t[(s+a)*e+(n+o)],d=3*(a+1)+(o+1);i+=c*r[d],h+=c*l[d]}const c=s*e+n;a[c]=Math.sqrt(i*i+h*h),o[c]=Math.atan2(h,i)}return{magnitude:a,direction:o}}#v(t,e,n,a){const o=new Uint8ClampedArray(n*a);for(let r=1;r<a-1;r++)for(let a=1;a<n-1;a++){const l=r*n+a,s=180*e[l]/Math.PI,i=t[l];let h=255,c=255;s>=-22.5&&s<22.5||s>=157.5||s<-157.5?(h=t[r*n+(a+1)],c=t[r*n+(a-1)]):s>=22.5&&s<67.5||s>=-157.5&&s<-112.5?(h=t[(r+1)*n+(a+1)],c=t[(r-1)*n+(a-1)]):s>=67.5&&s<112.5||s>=-112.5&&s<-67.5?(h=t[(r+1)*n+a],c=t[(r-1)*n+a]):(h=t[(r+1)*n+(a-1)],c=t[(r-1)*n+(a+1)]),o[l]=i>=h&&i>=c?Math.round(i):0}return o}#C(t,e,n,a,o){const r=new Uint8ClampedArray(e*n);for(let l=0;l<t.length;l++)t[l]>=o?r[l]=255:t[l]>=a&&(r[l]=128);return this.#U(r,e,n,255,128)}#U(t,e,n,a,o){const r=new Uint8ClampedArray(t);for(let l=1;l<n-1;l++)for(let t=1;t<e-1;t++){const n=l*e+t;if(r[n]===o){let o=!1;for(let n=-1;n<=1&&!o;n++)for(let s=-1;s<=1&&!o;s++){if(0===s&&0===n)continue;r[(l+n)*e+(t+s)]===a&&(o=!0)}r[n]=o?a:0}}return r}#d(t,e,n){const a=[1,1,1,1,1,1,1,1,1],o=this.#D(t,e,n,a);return this.#I(o,e,n,a)}#D(t,e,n,a){const o=new Uint8ClampedArray(e*n);for(let r=1;r<n-1;r++)for(let n=1;n<e-1;n++){let l=0;for(let o=-1;o<=1;o++)for(let s=-1;s<=1;s++){if(a[3*(o+1)+(s+1)]){const a=t[(r+o)*e+(n+s)];l=Math.max(l,a)}}o[r*e+n]=l}return o}#I(t,e,n,a){const o=new Uint8ClampedArray(e*n);for(let r=1;r<n-1;r++)for(let n=1;n<e-1;n++){let l=255;for(let o=-1;o<=1;o++)for(let s=-1;s<=1;s++){if(a[3*(o+1)+(s+1)]){const a=t[(r+o)*e+(n+s)];l=Math.min(l,a)}}o[r*e+n]=l}return o}#u(t,e,n){const a=[],o=.1*Math.min(e,n);for(let r=0;r<n;r++){let n=null;for(let l=0;l<e;l++){const s=t[r*e+l]>0;if(s&&null===n)n=l;else if(!s&&null!==n){const t=l-n;t>=o&&a.push({type:"wall",orientation:"horizontal",start:{x:n,y:r},end:{x:l-1,y:r},length:t}),n=null}}if(null!==n){const t=e-n;t>=o&&a.push({type:"wall",orientation:"horizontal",start:{x:n,y:r},end:{x:e-1,y:r},length:t})}}for(let r=0;r<e;r++){let l=null;for(let s=0;s<n;s++){const n=t[s*e+r]>0;if(n&&null===l)l=s;else if(!n&&null!==l){const t=s-l;t>=o&&a.push({type:"wall",orientation:"vertical",start:{x:r,y:l},end:{x:r,y:s-1},length:t}),l=null}}if(null!==l){const t=n-l;t>=o&&a.push({type:"wall",orientation:"vertical",start:{x:r,y:l},end:{x:r,y:n-1},length:t})}}return a}#f(t,e,n,a){const o=[],r=.02*Math.min(n,a),l=.08*Math.min(n,a);return e.forEach((e=>{this.#A(t,e,n,a).forEach((t=>{t.length>=r&&t.length<=l&&o.push({type:"door",position:t.center,width:t.length,wall:e,orientation:e.orientation})}))})),o}#m(t,e,n,a){const o=[],r=.03*Math.min(n,a),l=.15*Math.min(n,a);return e.forEach((e=>{this.#A(t,e,n,a).forEach((t=>{t.length>=r&&t.length<=l&&o.push({type:"window",position:t.center,width:t.length,wall:e,orientation:e.orientation})}))})),o}#A(t,e,n,a){const o=[],{start:r,end:l,orientation:s}=e;if("horizontal"===s){let e=null;for(let a=r.x;a<=l.x;a++){const l=t[r.y*n+a]>0;l||null!==e?l&&null!==e&&(o.push({start:e,end:a-1,length:a-e,center:{x:(e+a-1)/2,y:r.y}}),e=null):e=a}}else{let e=null;for(let a=r.y;a<=l.y;a++){const l=t[a*n+r.x]>0;l||null!==e?l&&null!==e&&(o.push({start:e,end:a-1,length:a-e,center:{x:r.x,y:(e+a-1)/2}}),e=null):e=a}}return o}#g(t,e,n,a){const o=new Uint8ClampedArray(t),r=[],l=new Set;e.forEach((t=>{const{start:e,end:a,orientation:r}=t;if("horizontal"===r)for(let l=e.x;l<=a.x;l++)o[e.y*n+l]=255;else for(let l=e.y;l<=a.y;l++)o[l*n+e.x]=255}));for(let s=0;s<a;s++)for(let t=0;t<n;t++){const e=s*n+t;if(!l.has(e)&&0===o[e]){const e=this.#E(o,t,s,n,a,l);e.area>100&&r.push({type:"room",bounds:e.bounds,area:e.area,center:e.center})}}return r}#E(t,e,n,a,o,r){const l=[{x:e,y:n}],s=[];let i=e,h=e,c=n,d=n;for(;l.length>0;){const{x:e,y:n}=l.pop(),u=n*a+e;e<0||e>=a||n<0||n>=o||r.has(u)||0!==t[u]||(r.add(u),s.push({x:e,y:n}),i=Math.min(i,e),h=Math.max(h,e),c=Math.min(c,n),d=Math.max(d,n),l.push({x:e+1,y:n},{x:e-1,y:n},{x:e,y:n+1},{x:e,y:n-1}))}return{area:s.length,bounds:{minX:i,maxX:h,minY:c,maxY:d},center:{x:(i+h)/2,y:(c+d)/2}}}#y(t,e,n){if(0===t.length)return 50;const a=t.map((t=>t.length)),o=a.reduce(((t,e)=>t+e),0)/a.length/4;return Math.max(10,Math.min(200,o))}getProcessedImageData(){return this.#a}dispose(){this.#t=null,this.#e=null,this.#n=null,this.#a=null}}export{t as default};
